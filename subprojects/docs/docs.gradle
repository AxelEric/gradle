
/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.gradlebuild.unittestandcompile.ModuleType

plugins {
    id 'java-library'
    id 'javascript-base'
    // TODO: Apply asciidoctor in documentation plugin instead.
    id 'org.asciidoctor.convert'
    id 'gradlebuild.documentation'
    id 'org.gradle.samples' version "0.15.27"
}

repositories {
    javaScript.googleApis()
}

configurations {
    gradleFullDocsElements {
        visible = false
        canBeResolved = false
        canBeConsumed = true
        attributes.attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, "docs"))
        attributes.attribute(Attribute.of("type", String), "full-docs")
    }
    gradleGettingStartedElements {
        visible = false
        canBeResolved = false
        canBeConsumed = true
        attributes.attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, "docs"))
        attributes.attribute(Attribute.of("type", String), "getting-started")
    }

    gradleApiRuntime {
        visible = false
        canBeResolved = true
        canBeConsumed = false
        attributes.attribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage, Usage.JAVA_RUNTIME))
        attributes.attribute(Attribute.of("org.gradle.api", String), "runtime")
    }
}

dependencies {
    asciidoctor "org.gradle:docs-asciidoctor-extensions:0.4.0"
    // TODO: Why isn't this using the output instead?
    asciidoctor project.files("src/main/resources")

    userGuideTask 'xalan:xalan:2.7.1'
    userGuideTask 'xerces:xercesImpl:2.11.0'
    userGuideTask 'xhtmlrenderer:xhtmlrenderer:R8rc1'
    userGuideTask 'itext:itext:2.0.8'
    userGuideTask 'xslthl:xslthl:2.0.1'

    userGuideStyleSheets 'docbook:docbook-xsl:1.75.2@zip'

    jquery "jquery:jquery.min:1.8.0@js"

    testImplementation project(":baseServices")
    testImplementation project(":core")
    testImplementation testLibraries.jsoup
    testImplementation("org.gebish:geb-spock:2.2")
    testImplementation('org.seleniumhq.selenium:selenium-htmlunit-driver:2.42.2')
    testImplementation libraries.commons_httpclient.coordinates
    testImplementation "org.apache.httpcomponents:httpmime:${libraries.commons_httpclient.version}"

    gradleApiRuntime project(":")
}

gradlebuildJava {
    moduleType = ModuleType.CORE
}

asciidoctorj {
    version = '1.5.8.1'
    noDefaultRepositories = true
}

gradleDocumentation {
    javadocs {
        javaApi = project.uri("https://docs.oracle.com/javase/8/docs/api")
        groovyApi = project.uri("https://docs.groovy-lang.org/docs/groovy-${groovyVersion}/html/gapi")
        mavenApi = project.uri("https://maven.apache.org/ref/${libraries.maven3.version}/maven-model/apidocs")
    }
}

tasks.named("stageDocs") {
    // Add samples to generated documentation
    from(samples.distribution.renderedDocumentation) {
        into("samples")
    }
}

samples {
    templates {
        javaAndroidApplication
        springBootWebApplication

        javaApplication
        javaListLibrary
        javaUtilitiesLibrary
        javaApplicationAsSubproject {
            sourceDirectory = javaApplication.sourceDirectory
            target = "application"
        }
        javaListLibraryAsSubproject {
            sourceDirectory = javaListLibrary.sourceDirectory
            target = "list"
        }
        javaUtilitiesLibraryAsSubproject {
            sourceDirectory = javaUtilitiesLibrary.sourceDirectory
            target = "utilities"
        }

        groovySpockTestForListLibrary {
            target = "list"
        }
        groovySpockTestForApplication {
            target = "application"
        }
        javaJunit4TestForApplication {
            target = "application"
        }
        javaJunit4TestForListLibrary {
            target = "list"
        }
        javaJunit4IntegrationTestForApplication {
            target = "application"
        }
        javaJunit4IntegrationTestForListLibrary {
            target = "list"
        }

        groovyApplication
        groovyListLibrary
        groovyUtilitiesLibrary
        groovyApplicationAsSubproject {
            sourceDirectory = groovyApplication.sourceDirectory
            target = "application"
        }
        groovyListLibraryAsSubproject {
            sourceDirectory = groovyListLibrary.sourceDirectory
            target = "list"
        }
        groovyUtilitiesLibraryAsSubproject {
            sourceDirectory = groovyUtilitiesLibrary.sourceDirectory
            target = "utilities"
        }

        kotlinApplication
        kotlinListLibrary
        kotlinUtilitiesLibrary
    }
    publishedSamples {
        androidApplication {
            description = "Demonstrates building a simple Android application."
            category = "Android"
            common {
                from(templates.javaAndroidApplication)
            }
        }
        springBootWebApplication {
            description = "Demonstrates a simple Spring Boot application."
            category = "Spring"
            common {
                from(templates.springBootWebApplication)
            }
        }

        jvmComponentsWithAdditionalTestTypes {
            displayName = "JVM project with additional test types"
            description = "Demonstrates how to add an additional test type (e.g. integration tests) to a JVM project."
            category = "JVM"

            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaJunit4TestForApplication)
                from(templates.javaJunit4IntegrationTestForApplication)
                
                from(templates.javaListLibraryAsSubproject)
                from(templates.javaJunit4TestForListLibrary)
                from(templates.javaJunit4IntegrationTestForListLibrary)

                from(templates.javaUtilitiesLibraryAsSubproject)
            }
        }

        jvmMultiProjectBuild {
            displayName = "JVM Multi-project build"
            description = "Demonstrates how transitive dependencies work in a multi-project build."
            category = "JVM"
            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaListLibraryAsSubproject)
                from(templates.javaUtilitiesLibraryAsSubproject)
            }
        }

        javaApplication {
            sampleDirectory = samplesRoot.dir("java/application")
            description = "Demonstrates how to build a Java application."
            category = "Java"
            common {
                from(templates.javaApplication)
                from(templates.javaListLibrary)
                from(templates.javaUtilitiesLibrary)
            }
        }
        javaLibrary {
            sampleDirectory = samplesRoot.dir("java/library")
            description = "Demonstrates how to build a Java library."
            category = "Java"
            common {
                from(templates.javaListLibrary)
                from(templates.javaUtilitiesLibrary)
            }
        }
        javaComponentsWithSpockTests {
            sampleDirectory = samplesRoot.dir("java/components-with-spock-tests")
            description = "Demonstrates how to test Java components with the Spock framework."
            category = "Java"
            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaListLibraryAsSubproject)
                from(templates.javaUtilitiesLibraryAsSubproject)
                from(templates.groovySpockTestForApplication)
                from(templates.groovySpockTestForListLibrary)
            }
        }
        javaComponentsWithJUnit4Tests {
            sampleDirectory = samplesRoot.dir("java/components-with-junit-4-tests")
            displayName = "Java Components With JUnit 4 Tests"
            description = "Demonstrates how to test Java components with JUnit4."
            category = "Java"
            common {
                from(templates.javaApplicationAsSubproject)
                from(templates.javaListLibraryAsSubproject)
                from(templates.javaUtilitiesLibraryAsSubproject)
                from(templates.javaJunit4TestForApplication)
                from(templates.javaJunit4TestForListLibrary)
            }
        }
        javaLibraryPublishing {
            sampleDirectory = samplesRoot.dir("java/library-publishing")
            description = "Demonstrates how to publish a Java library to a binary repository."
            category = "Java"
            common {
                from(templates.javaListLibrary)
                from(templates.javaUtilitiesLibrary)
            }
        }

        kotlinApplication {
            sampleDirectory = samplesRoot.dir("kotlin/application")
            description = "Demonstrates how to build a Kotlin application."
            category = "Kotlin"
            common {
                from(templates.kotlinApplication)
                from(templates.kotlinListLibrary)
                from(templates.kotlinUtilitiesLibrary)
            }
        }
        kotlinLibrary {
            sampleDirectory = samplesRoot.dir("kotlin/library")
            description = "Demonstrates how to build a Kotlin library."
            category = "Kotlin"
            common {
                from(templates.kotlinListLibrary)
                from(templates.kotlinUtilitiesLibrary)
            }
        }

        groovyApplication {
            sampleDirectory = samplesRoot.dir("groovy/application")
            description = "Demonstrates how to build a Groovy application."
            category = "Groovy"
            common {
                from(templates.groovyApplication)
                from(templates.groovyListLibrary)
                from(templates.groovyUtilitiesLibrary)
            }
        }
        groovyLibrary {
            sampleDirectory = samplesRoot.dir("groovy/library")
            description = "Demonstrates how to build a Groovy library."
            category = "Groovy"
            common {
                from(templates.groovyListLibrary)
                from(templates.groovyUtilitiesLibrary)
            }
        }
        groovyComponentsWithSpockTests {
            sampleDirectory = samplesRoot.dir("groovy/components-with-spock-tests")
            description = "Demonstrates how to test Groovy components with the Spock framework."
            category = "Groovy"
            common {
                from(templates.groovyApplicationAsSubproject)
                from(templates.groovyListLibraryAsSubproject)
                from(templates.groovyUtilitiesLibraryAsSubproject)
                from(templates.groovySpockTestForApplication)
                from(templates.groovySpockTestForListLibrary)
            }
        }
        groovyLibraryPublishing {
            sampleDirectory = samplesRoot.dir("groovy/library-publishing")
            description = "Demonstrates how to publish a Groovy library to a binary repository."
            category = "Groovy"
            common {
                from(templates.groovyListLibrary)
                from(templates.groovyUtilitiesLibrary)
            }
        }
    }
}

// TODO: Fix upstream plugin to disable Checkstyle checks for the generated sources
tasks.named("checkstyleSamplesExemplarFunctionalTest") {
    enabled = false
}

// Publications for the docs subproject:

configurations {
    gradleFullDocsElements {
        // TODO: This breaks the provider
        outgoing.artifact(project.gradleDocumentation.getDocumentationRenderedRoot().get().asFile) {
            builtBy 'docs'
        }
    }
    gradleGettingStartedElements {
        outgoing.artifact(file("src/docs/README"))
    }
}
